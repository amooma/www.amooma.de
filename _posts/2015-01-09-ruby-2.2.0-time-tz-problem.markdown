---
layout: post
title: "Ruby 2.2 Time#parse Zeitzonen Problem"
lang: en
date: 2015-01-09 18:00:00
tags: Rails Ruby
author: Stefan Wintermeyer
email: stefan.wintermeyer@amooma.de
homepage: http://www.wintermeyer.de
abstract: "Time#parse Zeitzonen Problem bei Ruby 2.2. Es wird nicht per Default die System-Zeitzone benutzt."
custom_css:
  - blog
  - syntax
---
Parker Moore (<a href="http://twitter.com/parkr">@parkr</a>) hat in seinem Blog-Post <a href="https://byparker.com/blog/2014/ruby-2-2-0-time-parse-localtime-regression/">Ruby 2.2.0 Time#parse TZ-related regression</a> einen für alle Rails- und Ruby-Entwickler wichtigen Punkt (Bug oder Feature?) zur Ruby Version 2.2 veröffentlicht. Bis einschliesslich Ruby 2.1 wurde von `Time.parse()` der zur parsende Uhrzeit für die System-Zeitzone geparst. Ab Ruby 2.2 muss dafür die Methode `localtime` benutzt werden.

Das von Parker erstellte Beispiel zeigt das Problem:

## Ruby 2.1
{% highlight ruby %}
>> require 'time'
=> true
>> ENV['TZ'] = 'Australia/Melbourne'
=> "Australia/Melbourne"
>> Time.parse("2014-12-29 20:16:32 -0400")
=> 2014-12-30 11:16:32 +1100
{% endhighlight %}

## Ruby 2.2
{% highlight ruby %}
>> require 'time'
=> true
>> ENV['TZ'] = 'Australia/Melbourne'
=> "Australia/Melbourne"
>> Time.parse("2014-12-29 20:16:32 -0400")
=> 2014-12-29 20:16:32 -0400 # <== !!! Timezone remains unchanged.
>> Time.parse("2014-12-29 20:16:32 -0400").localtime
=> 2014-12-30 11:16:32 +1100
{% endhighlight %}

## Lösung
Ein `gem update` sollte die Probleme allen gut gewarteten Gems lösen. Für den eigenen Code sollte man einmal nach `Time.parse` suchen und dann die Methode `localtime` hinzufügen.
